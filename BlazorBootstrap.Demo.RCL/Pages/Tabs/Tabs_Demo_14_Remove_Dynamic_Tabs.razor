<Tabs @ref="tabsRef">
    @foreach (var customer in customers)
    {
        <Tab Title="@customer.CustomerName"
             Name="@($"{customer.CustomerId}")"
             OnClick="(args) => OnTabClick(args, customer)">
            <Content>
                <div class="mt-3">
                    This is the placeholder content for the <b>@customer.CustomerName</b> tab.
                </div>
                <div>
                    <Button Color="ButtonColor.Danger" Class="mt-3" Size="Size.Small" @onclick="() => RemoveCustomer(customer)">Remove tab</Button>
                </div>
            </Content>
        </Tab>
    }
</Tabs>

@if (selectedCustomer is not null)
{
    <div class="mt-3">Selected customer: <b>@selectedCustomer.CustomerName</b></div>
}

<Button Color="ButtonColor.Success" Class="mt-3" @onclick="AddCustomer">Add customer</Button>


@code {
    Tabs tabsRef = default!;

    private List<Customer> customers = new();

    private Customer selectedCustomer = default!;

    protected override void OnInitialized()
    {
        customers = new() { new(1, "Marvin Klein"), new(2, "Vikram Reddy"), new(3, "Bandita PA"), new(4, "Daina JJ") };
        selectedCustomer = customers.Last();
    }

    private void AddCustomer()
    {
        var count = customers.Count;
        var customer = new Customer(count + 1, $"Customer {count + 1}");
        customers.Add(customer);
        tabsRef.InitializeRecentTab(showTab: true);
    }

    private void RemoveCustomer(Customer customer)
    {
        tabsRef.RemoveTabByName(customer.CustomerId.ToString());
        //customers.Remove(customer);
    }

    private void OnTabClick(TabEventArgs args, Customer customer) => selectedCustomer = customer;
}
