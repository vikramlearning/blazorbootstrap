@page "/customcss"

<PageTitle>@Title</PageTitle>

<MetaTags PageUrl="@PageUrl" Title="@Title" Description="@Description" ImageUrl="@ImageUrl" />

<h1>Bootstrap CSS Generator</h1>
<div class="lead mb-3">
    To prevent the need to generate custom Bootstrap CSS for your website using Node.js or by hand, Blazor Bootstrap can generate custom CSS to stylize your web page to your specific needs, for both light and dark mode.
</div>

<CarbonAds />

<SectionHeading Size="HeadingSize.H2" Text="About" PageUrl="@PageUrl" HashTagName="about" />
<div class="mb-3">
    CSS is generated by providing it with a provided data model for CSS settings. By default, the generator will take the manually provided values and use the default Bootstrap values as default if not provided.
    For example, if you provide a value for the primary color, it will use that value. it will then use that provided value for the buttons, links, and other elements using said primary color.
    However, if need be, you can also override the primary button color itself with a different value.
    
    <Callout Color="CalloutColor.Info" Heading="Important">
        <strong>Don't override what you don't need to override</strong>. It is recommended to only override the CSS settings you need to specifically override, and let the generator use the default values otherwise.
    </Callout>
    
    <Callout Color="CalloutColor.Info" Heading="Note">
        The generator has been based on the functionalities of the default <a href="https://getbootstrap.com/docs/5.0/customize/sass/">Bootstrap customization toolkit using SASS</a>.
    </Callout>
</div>

<SectionHeading Size="HeadingSize.H2" Text="Implementation (controller)" PageUrl="@PageUrl" HashTagName="controller"/>
<div class="mb-3">
    The following example contains a simple controller that generates the CSS for the website. The controller is set up to generate the CSS once and cache it for future requests.

    <Callout Color="CalloutColor.Warning" Heading="Warning">
        <strong>Warning: </strong>Constantly regenerating the CSS code may impact the performance of your server. It is recommended to only regenerate it if changes have occurred, 
        e.g. a custom styling that the user has decided to edit and apply. 
    </Callout>
    
    <Demo LanguageCssClass="language-cs" ShowCodeOnly="true" ProvidedCode="@ControllerCodeSnippet" />
</div>

<SectionHeading Size="HeadingSize.H3" Text="Css values" PageUrl="@PageUrl" HashTagName="cssnumbervalues" />
<div class="mb-3">
    For certain values, e.g. font-sizes, you can use the <code>CssPropertyValue</code> class to provide the value of a specific unit.
    
    <Demo LanguageCssClass="language-cs" ShowCodeOnly="true" ProvidedCode="@CssValuesTypesSnippet" />
</div>

<SectionHeading Size="HeadingSize.H2" Text="Implementation (frontend)" PageUrl="@PageUrl" HashTagName="controller" />
<div class="mb-3">
    In the front, e.g. the Blazor Host.cshtml file, you can replace the default Bootstrap.css with the custom CSS generated by the controller.
    Note how the line loading the default Bootstrap.min.css is replaced with the custom CSS controller providing the custom CSS.
    
    <Callout Color="CalloutColor.Warning" Heading="Warning">
        <strong>Warning: </strong>If you load both the original Bootstrap(.min).css and the custom CSS, the custom CSS will not be applied properly, causing the styles to be mixed and not work as intended.
    </Callout>
    
    <Demo ShowCodeOnly="true" ProvidedCode="@CshtmlCodeSnippet" />
    
</div>

@code {
    private const string PageUrl = "/customcss";
    private const string Title = "Blazor Custom CSS Generator";
    private const string Description = "Blazor Bootstrap can generate custom CSS to stylize your web page to your specific needs, for both light and dark mode.";
    private const string ImageUrl = "https://i.imgur.com/beAr31J.png";

    private const string CssValuesTypesSnippet = @"
var degrees = CssPropertyValue.Angle(50); // returns 50deg
var rem = CssPropertyValue.Rem(1.5f); // returns 1.5rem
var raw = CssPropertyValue.RawNumber(100); // returns 100em
var percent = CssPropertyValue.Percentage(50); // returns 50%
var pixels = CssPropertyValue.Pixels(12); // returns 12px
var resolution = CssPropertyValue.Resolution(10); // returns 10dpi

// Alternatively, default values can be used on properties of type CssPropertyValue.
var inherit = CssStyleEnum.Inherit;
var initial = CssStyleEnum.Initial;
var unset = CssStyleEnum.Unset;
var auto = CssStyleEnum.Auto;
var none = CssStyleEnum.None;
";

    private const string CshtmlCodeSnippet = @"<link href=""Css/Bootstrap.css"" rel=""stylesheet"" />
<link href=""https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"" rel=""stylesheet""/>
<link href=""_content/Blazor.Bootstrap/blazor.bootstrap.css"" rel=""stylesheet"" />";
    
    private const string ControllerCodeSnippet = @"[Route(""Css/Bootstrap.css"")]
[AllowAnonymous]
public class CssController : Controller
{
	/// <summary>
	/// Default MobileTrack Bootstrap CSS settings (for both light/dark mode)
	/// </summary>
	private static readonly BootstrapCssSettings Settings;

	/// <summary>
	/// CSS Cache
	/// </summary>
	private static readonly string CssCache;

	/// <summary>
	/// Default controller to set the CSS cache.
	/// </summary>
	static CssController()
	{
		var primary = Color.FromArgb(48, 55, 117);
		var primaryLight = Color.FromArgb(216, 217, 223);
		var primaryDark = Color.FromArgb(9, 12, 38);
        Settings = new BootstrapCssSettings
				   {
					   BodyFontFamily = ""Cursive"",
					   CardCapPaddingY = CssPropertyValue.Pixels(12),
                       PrimaryColor = primary,
					   DangerColor = Color.FromArgb(240, 2, 2),
					   SuccessColor = Color.FromArgb(0, 100, 0),
					   WarningColor = Color.FromArgb(150, 150, 34),
					   Light =
					   {
						   CardCapBgColor = primaryLight,
						   CardCapTextColor = primaryDark
					   }, 
					   Dark =
					   {
						   CardCapBgColor = primaryDark,
                           CardCapTextColor = primaryLight
                       }
				   };

		CssCache = CssGenerator.GetBootstrapCss(Settings);
    }

	/// <summary>
	/// Retrieves CSS for Bootstrap, customized for the website.
	/// </summary>
	/// <returns>CSS content</returns>
	public IActionResult Get()
	{ 
		return Content(CssCache, ""text/css"");
	}
}";
}
