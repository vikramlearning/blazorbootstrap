﻿<Grid  TItem="User"
       Class="table table-hover table-bordered table-striped"
       DataProvider="UsersDataProvider"
       AllowFiltering="true"
       Responsive="true">

    <GridColumns>
        <GridColumn TItem="User" HeaderText="Oid" PropertyName="Oid" FilterTextboxWidth="240">
            @context.Oid
        </GridColumn>
        <GridColumn TItem="User" HeaderText="Id" PropertyName="Id" FilterTextboxWidth="70">
            @context.Id
        </GridColumn>
        <GridColumn TItem="User" HeaderText="User Name" PropertyName="Name" FilterTextboxWidth="100">
            @context.Name
        </GridColumn>
        <GridColumn TItem="User" HeaderText="DOB" PropertyName="DOB">
            @context.DOB
        </GridColumn>
        <GridColumn TItem="User" HeaderText="Status" PropertyName="Status" FilterTextboxWidth="170">
            @context.Status
        </GridColumn>
    </GridColumns>

</Grid>

@code {
    BlazorBootstrap.Grid<User> grid = default!;
    private IReadOnlyCollection<User> users = default!;

    private async Task<GridDataProviderResult<User>> UsersDataProvider(GridDataProviderRequest<User> request)
    {
        if (users is null) // pull employees only one time for client-side filtering, sorting, and paging
            users = GetUsers(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(users));
    }

    private IReadOnlyCollection<User> GetUsers()
    {
        return new List<User>
        {
            new User { Oid = Guid.NewGuid(), Id = 107, Name = "Alice", DOB = new DateOnly(1998, 11, 17), Status = UserStatus.Registered },
            new User { Oid = Guid.NewGuid(), Id = null, Name = "Bob", DOB = new DateOnly(1985, 1, 5), Status = UserStatus.Verified },
            new User { Oid = Guid.NewGuid(), Id = 106, Name = "John", DOB = new DateOnly(1995, 4, 17), Status = UserStatus.Registered },
            new User { Oid = Guid.NewGuid(), Id = 104, Name = "Pop", DOB = new DateOnly(1985, 6, 8), Status = UserStatus.Registered },
            new User { Oid = Guid.NewGuid(), Id = 105, Name = "Ronald", DOB = new DateOnly(1991, 8, 23), Status = UserStatus.VerificationPending },
            new User { Oid = Guid.NewGuid(), Id = 102, Name = "Line", DOB = new DateOnly(1977, 1, 12), Status = UserStatus.VerificationPending },
            new User { Oid = Guid.NewGuid(), Id = 101, Name = "Daniel", DOB = new DateOnly(1977, 1, 12), Status = UserStatus.Registered },
            new User { Oid = Guid.NewGuid(), Id = 108, Name = "Zayne", DOB = new DateOnly(1991, 1, 1), Status = UserStatus.Verified },
            new User { Oid = Guid.NewGuid(), Id = 109, Name = "Isha", DOB = null, Status = UserStatus.Verified },
            new User { Oid = Guid.NewGuid(), Id = 110, Name = "Vijay", DOB = new DateOnly(1990, 7, 1), Status = UserStatus.Verified },
        };
    }

    public record class User
    {
        public Guid Oid { get; set; }
        public int? Id { get; set; }
        public string? Name { get; set; }
        public DateOnly? DOB { get; set; }
        public UserStatus Status { get; set; }
    }

    public enum UserStatus
    {
        Registered,
        VerificationPending,
        Verified
    }
}