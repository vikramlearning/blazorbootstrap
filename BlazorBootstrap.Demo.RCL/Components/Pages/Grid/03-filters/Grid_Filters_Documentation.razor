@attribute [Route(pageUrl)]

<PageTitle>@title</PageTitle>

<MetaTags PageUrl="@pageUrl" Title="@title" Description="@description" ImageUrl="@imageUrl" />

<h1>@heading</h1>
<div class="lead mb-3">@description</div>

<CarbonAds />

<SectionHeading Size="HeadingSize.H2" Text="Client side filtering" PageUrl="@pageUrl" HashTagName="client-side-filtering" />
<div>For filtering, <code>AllowFiltering</code> and <code>PropertyName</code> parameters are required.</div>
<div class="mb-3">Add <code>AllowFiltering="true"</code> parameter to Grid and <code>PropertyName</code> parameter to all the GridColumns.</div>
<Demo Type="typeof(Grid_Demo_01_A_Client_Side_Filtering)" Tabs="true" />

<SectionHeading Size="HeadingSize.H2" Text="Client side filtering with StringComparision" PageUrl="@pageUrl" HashTagName="client-side-filtering-with-string-comparision" />
<div>In the below example, <code>StringComparision.Ordinal</code> is used on the <strong>Employee Name</strong> column to make the filter <b>case-sensitive</b>.</div>
<Callout Type="CalloutType.Danger" Heading="IMPORTANT">
    <div>By default, <code>StringComparison.OrdinalIgnoreCase</code> is used to compare culture-agnostic and case-insensitive string matching.</div>
</Callout>
<Demo Type="typeof(Grid_Demo_01_B_Client_Side_Filtering_With_StringComparision)" Tabs="true" />

<SectionHeading Size="HeadingSize.H2" Text="Set default filter" PageUrl="@pageUrl" HashTagName="set-default-filter" />
<div class="mb-2">
    <code>FilterOperator</code> and <code>FilterValue</code> parameters are required to set the default filter.
</div>
<Callout Type="CalloutType.Success">You can set the default filter on more than one GridColumn.</Callout>
<div class="mb-3">The default sorting is enabled on the <b>Id</b> column in the below example.</div>
<Demo Type="typeof(Grid_Demo_05_Set_Default_Filter)" Tabs="true" />

<SectionHeading Size="HeadingSize.H2" Text="Disable specific column filter" PageUrl="@pageUrl" HashTagName="disable-specific-column-filter" />
<div class="mb-3">
    <code>Filterable</code> parameter is required to disable the filter on a specific column. Add <code>Filterable="false"</code> parameter to GridColumn. The column filter is disabled on the <b>Id</b> column in the below example.
</div>
<Demo Type="typeof(Grid_Demo_06_Disable_Specific_Column_Filter)" Tabs="true" />

<SectionHeading Size="HeadingSize.H2" Text="Increase filter textbox width" PageUrl="@pageUrl" HashTagName="increase-filter-textbox-width" />
<div class="mb-2">Add <code>FilterTextboxWidth</code> parameter to the GridColumn to increase or decrease the filter textbox width, <code>FilterTextboxWidth</code> parameter is optional.</div>
<Callout>Filter textbox width measured in pixels.</Callout>
<Demo Type="typeof(Grid_Demo_06_Increase_Filter_Textbox_Width)" Tabs="true" />

<Callout Type="CalloutType.Success" Heading="Important">
    <p>
        The <b>Add Employee</b> button click adds a new employee to the existing <b>employees</b> collection—so explicit grid refresh is required.
    </p>
    <p>
        The <b>Add Employee 2</b> button click creates a shallow copy of the <b>employees</b> collection and adds a new employee.
        This new collection is assigned to the <b>employees</b> variable. Now, the <b>employees</b> variable has a new reference. So the grid will refresh automatically. An explicit grid refresh call is not required.
    </p>
</Callout>

<SectionHeading Size="HeadingSize.H2" Text="Enum filter" PageUrl="@pageUrl" HashTagName="enum-filter" />
<Demo Type="typeof(Grid_Demo_35_Enum_Filters)" Tabs="true" />

<SectionHeading Size="HeadingSize.H2" Text="Guid filter" PageUrl="@pageUrl" HashTagName="guid-filter" />
<Demo Type="typeof(Grid_Demo_36_Guid_Filters)" Tabs="true" />

@code {
    private const string pageUrl = "/grid/filters";
    private const string title = "Blazor Grid Component - Filters";
    private const string heading = "Blazor Grid - Filters";
    private const string description = "Use Blazor Bootstrap grid component to display tabular data from the data source. And it supports client-side and server-side filtering, paging, and sorting.";
    private const string imageUrl = "https://i.imgur.com/kKNgo2I.png";
}
