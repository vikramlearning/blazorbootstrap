@attribute [Route(pageUrl)]

<PageMetaTags PageUrl="@pageUrl"
              Title="@metaTitle"
              Description="@metaDescription"
              ImageUrl="@imageUrl" />

<PageHero Heading="@pageTitle">
    <LeadSection>@pageDescription</LeadSection>
</PageHero>

<CarbonAds />

<Section Size="HeadingSize.H2" Name="Examples" PageUrl="@pageUrl" Link="examples">
    <Demo Type="typeof(Modal_Demo_01_Examples)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Dynamic component as modal" PageUrl="@pageUrl" Link="dynamic-component-as-modal">
    <div class="mb-3">Render different components dynamically within the modal without iterating through possible types or using conditional logic.</div>
    <div class="mb-3">
        If dynamically-rendered components have component parameters, pass them as an <code>IDictionary</code>. The <code>string</code> is the parameter's name, and the <code>object</code> is the parameter's value.
    </div>
    <Demo Type="typeof(Modal_Demo_02_A_Show_Dynamic_Component)" />
    <b>EmployeeDemoComponent1.razor</b>
    <Demo Type="typeof(EmployeeDemoComponent1)" ShowCodeOnly="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Pass event callbacks to a dynamic component" PageUrl="@pageUrl" Link="pass-event-callbacks-to-a-dynamic-component">
    <div class="mb-3">Event callbacks <code>(EventCallback)</code> can be passed in its parameter dictionary.</div>
    <div class="mb-3">
        In the following parent component example, the <code>ShowDTMessage</code> method assigns a string with the current time to <code>message</code>, and the value of <code>message</code> is rendered.
        The parent component passes the callback method, ShowDTMessage in the parameter dictionary:
        <ul style="disc">
            <li>The <code>string</code> key is the callback method's name, <code>OnClickCallback</code>.</li>
            <li>The <code>object</code> value is created by <code>EventCallbackFactory.Create</code> for the parent callback method, <code>ShowDTMessage</code>.</li>
        </ul>    
    </div>
    <Demo Type="typeof(Modal_Demo_02_B_Pass_Event_Callback_to_a_Dynamic_Component)" />
    <b>EmployeeDemoComponent2.razor</b>
    <Demo Type="typeof(EmployeeDemoComponent2)" ShowCodeOnly="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Static backdrop" PageUrl="@pageUrl" Link="static-backdrop">
    <div class="mb-3">When <code>UseStaticBackdrop</code> is set to <code>true</code>, the modal will not close when clicking outside it. Click the button below to try it.</div>
    <Demo Type="typeof(Modal_Demo_02_Static_Backdrop)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Scrolling long content" PageUrl="@pageUrl" Link="scrolling-long-content">
    <div class="mb-3">When modals become too long for the user’s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.</div>
    <Demo Type="typeof(Modal_Demo_03_Scrolling_Long_Content_A)" Tabs="true" />

    <div class="mb-3">You can also create a scrollable modal that allows scroll the modal body by adding <code>IsScrollable="true"</code>.</div>
    <Demo Type="typeof(Modal_Demo_03_Scrolling_Long_Content_B)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Vertically centered" PageUrl="@pageUrl" Link="vertically-centered">
    <div class="mb-3">Add <code>IsVerticallyCentered="true"</code> to vertically center the modal.</div>
    <Demo Type="typeof(Modal_Demo_04_Vertically_Centered)" Tabs="true" />
    <Demo Type="typeof(Modal_Demo_04_Vertically_Centered_And_Scrollable)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Optional sizes" PageUrl="@pageUrl" Link="optional-sizes">
    <div class="mb-3">Modals have three optional sizes. These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.</div>
    <Demo Type="typeof(Modal_Demo_05_Optional_Sizes)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Fullscreen Modal" PageUrl="@pageUrl" Link="fullscreen-modal">
    <Demo Type="typeof(Modal_Demo_06_Fullscreen_Modal)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Events" PageUrl="@pageUrl" Link="events">
    <div class="mb-3">Blazor Bootstrap modal class exposes a few events for hooking into modal functionality. </div>
    <Demo Type="typeof(Modal_Demo_07_Events)" Tabs="true" />
</Section>

@code {
    private const string pageUrl = RouteConstants.Demos_Modal_Documentation;
    private const string pageTitle = "Blazor Modal";
    private const string pageDescription = "Use Blazor Bootstrap modal component to add dialogs to your site for lightboxes, user notifications, or completely custom content.";
    private const string metaTitle = "Blazor Modal Component";
    private const string metaDescription = "Use Blazor Bootstrap modal component to add dialogs to your site for lightboxes, user notifications, or completely custom content.";
    private const string imageUrl = "https://i.imgur.com/aWbURjD.jpg";
}