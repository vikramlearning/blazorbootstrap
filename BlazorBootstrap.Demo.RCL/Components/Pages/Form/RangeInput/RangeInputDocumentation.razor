@page "/range-input"

@attribute [Route(pageUrl)]

<PageMetaTags PageUrl="@pageUrl"
              Title="@metaTitle"
              Description="@metaDescription"
              ImageUrl="@imageUrl" />

<PageHero Heading="@pageTitle">
    <LeadSection>@pageDescription</LeadSection>
</PageHero>

<CarbonAds />

<Section Size="HeadingSize.H2" Name="Basic usage" PageUrl="@pageUrl" Link="basic-usage">
    <div class="mb-3"></div>
    <Demo Type="typeof(RangeInput_Demo_01_Basic_Usage_A)" Tabs="false" />
    <Demo Type="typeof(RangeInput_Demo_01_Basic_Usage_B)" Tabs="false" />
</Section>

<Section Size="HeadingSize.H2" Name="Disabled" PageUrl="@pageUrl" Link="disabled">
    <div class="mb-3">Use the <code>Disabled</code> parameter to disable the <code>RangeInput</code>.</div>
    <Demo Type="typeof(RangeInput_Demo_02_Disabled_A)" Tabs="true" />
    <div class="my-3">Also, use <code>Enable()</code> and <code>Disable()</code> methods to enable and disable the <code>RangeInput</code>.</div>
    <Callout Color="CalloutColor.Danger" Heading="Danger">
        Do not use both the <code>Disabled</code> parameter and <code>Enable()</code> &amp; <code>Disable()</code> methods.
    </Callout>
    <Demo Type="typeof(RangeInput_Demo_02_Disabled_B)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Min and max" PageUrl="@pageUrl" Link="min-and-max">
    <div class="mb-3">
        Set the <code>Min</code> and <code>Max</code> parameters to restrict the user input between the <code>Min</code> and <code>Max</code> range.
        By default, the minimum is 0.
    </div>
    <Callout Type="CalloutColor.Warning" Heading="NOTE">
        <p>
            By default the maximum is 100 for <code>sbyte?</code>, <code>short?</code>, <code>int?</code>, <code>long?</code>, <code>float?</code>, <code>double?</code> and <code>decimal?</code> data types. For other data types it is 0.
        </p>
        <p>
            If the user tries to specify a numeric value which is out of range, then it will override with <code>Min</code> or <code>Max</code> value based on the context. If the user input is less than the minimum value, then it will override with the <code>Min</code> value.
            If the user input exceeds the maximum value, it will override with the <code>Max</code> value.
        </p>
    </Callout>
    <Demo Type="typeof(RangeInput_Demo_03_Min_Max)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Step" PageUrl="@pageUrl" Link="step">
    <div class="mb-3">The <code>Step</code> parameter is a number that specifies the granularity that the value must adhere to. Only values that match the specified stepping interval are valid.</div>
    <Demo Type="typeof(RangeInput_Demo_04_Step)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Decimal values" PageUrl="@pageUrl" Link="decimal-values">
    <div class="mb-3"></div>
    <Demo Type="typeof(RangeInput_Demo_05_Decimals)" Tabs="false" />
</Section>

<Section Size="HeadingSize.H2" Name="Tick marks" PageUrl="@pageUrl" Link="tick-marks">
    <div class="mb-3">
        To add tick marks to a <code>RangeInput</code>, set the <code>TickMarks</code> parameter.
    </div>
    <Demo Type="typeof(RangeInput_Demo_06_Tick_Marks)" Tabs="true" />
</Section>

@code {
    private const string pageUrl = RouteConstants.Demos_RangeInput_Documentation;
    private const string pageTitle = "Blazor RangeInput";
    private const string pageDescription = "Blazor Bootstrap RangeInput component is built around HTML input of type=\"range\".";
    private const string metaTitle = "Blazor RangeInput Component";
    private const string metaDescription = "Blazor Bootstrap RangeInput component is built around HTML input of type=\"range\".";
    private const string imageUrl = "https://i.imgur.com/rWDDHaf.png";
}
