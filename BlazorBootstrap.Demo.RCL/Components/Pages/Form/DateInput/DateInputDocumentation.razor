@page "/date-input"

@attribute [Route(pageUrl)]

<PageMetaTags PageUrl="@pageUrl"
              Title="@metaTitle"
              Description="@metaDescription"
              ImageUrl="@imageUrl" />

<PageHero Heading="@pageTitle">
    <LeadSection>@pageDescription</LeadSection>
</PageHero>

<CarbonAds />

<Section Size="HeadingSize.H2" Name="Basic usage" PageUrl="@pageUrl" Link="basic-usage">
    <Callout Color="CalloutColor.Warning" Heading="NOTE">
        The input UI generally varies from browser to browser.
        In unsupported browsers, the control degrades gracefully to <code>type="text"</code>.
    </Callout>

    <Demo Type="typeof(DateInput_Demo_01_Basic_Usage)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Generic type" PageUrl="@pageUrl" Link="generic-type">
    <div class="mb-3">
        <p>
            The Blazor Bootstrap DateInput component supports several data types: <code>DateOnly</code>, <code>DateOnly?</code>, <code>DateTime</code>, and <code>DateTime?</code>.
            This allows flexible component usage to accommodate various data types in Blazor applications.
        </p>
        <p>
            In the below example, <b>TValue</b> is set to <code>DateOnly</code>, <code>DateOnly?</code>, <code>DateTime</code>, and <code>DateTime?</code>.
        </p>
    </div>
    <Demo Type="typeof(DateInput_Demo_02_Generic_Type)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Enable max min" PageUrl="@pageUrl" Link="enable-max-min">
    <div class="mb-3">
        Set <code>EnableMinMax="true"</code> and set the <code>Max</code> and <code>Min</code> parameters to restrict the user input between the Min and Max range.
    </div>
    <Callout Color="CalloutColor.Warning" Heading="NOTE">
        If the user tries to enter a number in the <b>DateInput</b> field which is out of range, then it will override with Max or Min value based on the context. 
        If the user input exceeds the Max value, it will override with the Max value. If the user input is less than the Min value, then it will override with the Min value.
    </Callout>
    <Demo Type="typeof(DateInput_Demo_03_Max_Min)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Disable" PageUrl="@pageUrl" Link="disable">
    <div class="mb-3">Use the <code>Disabled</code> parameter to disable the <code>DateInput</code>.</div>
    <Demo Type="typeof(DateInput_Demo_04_A_Disable_Date_Input)" Tabs="false" />
    <div class="my-3">Also, use <b>Enable()</b> and <b>Disable()</b> methods to enable and disable the <code>DateInput</code>.</div>
    <Callout Color="CalloutColor.Warning" Heading="NOTE">
        Do not use both the <b>Disabled</b> parameter and <b>Enable()</b> &amp; <b>Disable()</b> methods.
    </Callout>
    <Demo Type="typeof(DateInput_Demo_04_B_Disable_Date_Input)" Tabs="false" />
</Section>

<Section Size="HeadingSize.H2" Name="Validations" PageUrl="@pageUrl" Link="validations">
    <div class="mb-3">
        Like any other blazor input component, <b>DateInput</b> component supports validations. Use the <b>DataAnnotations</b> to validate the user input before submitting the form. In the below example, we used the <code>Required</code> attributes.
    </div>
    <Demo Type="typeof(DateInput_Demo_05_Validations)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Events: ValueChanged" PageUrl="@pageUrl" Link="event-value-changed">
    <div class="mb-3">
        This event fires on every user keystroke/selection that changes the <b>DateInput</b> value.
    </div>
    <Demo Type="typeof(DateInput_Demo_06_Events_Value_Changed)" Tabs="true" />
</Section>

<Section Size="HeadingSize.H2" Name="Restrict the date field based on the entry in another date field" PageUrl="@pageUrl" Link="restrict-the-date-field-based-on-the-entry-in-another-date-field">
    <div class="mb-3">
        One common scenario is that the date fields are restricted based on the entry in another date field.
        In the example below, we restrict the course end time based on the selection of course start date.
    </div>
    <Demo Type="typeof(DateInput_Demo_07_Restrict_The_Date_Field_Based_On_The_Entry_In_Another_Date_Field)" Tabs="true" />
</Section>

@code {
    private const string pageUrl = RouteConstants.Demos_DateInput_Documentation;
    private const string pageTitle = "Blazor DateInput";
    private const string pageDescription = "The Blazor Bootstrap DateInput component is constructed using an HTML input of type 'date' which limits user input based on pre-defined parameters. This component enables users to input a date using a text box with validation or a special date picker interface.";
    private const string metaTitle = "Blazor DateInput Component";
    private const string metaDescription = "The Blazor Bootstrap DateInput component is constructed using an HTML input of type 'date' which limits user input based on pre-defined parameters. This component enables users to input a date using a text box with validation or a special date picker interface.";
    private const string imageUrl = "https://i.imgur.com/1mVjqQv.png";
}
