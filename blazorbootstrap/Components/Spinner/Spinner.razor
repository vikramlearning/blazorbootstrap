@namespace BlazorBootstrap
@inherits BlazorBootstrapComponentBase

@if (Visible)
{
    var cssClass = Type is SpinnerType.Border or SpinnerType.Grow 
        ? $"{@EnumExtensions.SpinnerTypeClassMap[Type]}-{EnumExtensions.SpinnerSizeClassMap[Size]}"
        : "";
    @if (Type == SpinnerType.Dots)
    {
        var spinnerSvg = GetSpinnerSvgInfo();
        <svg id="@Id" class="@cssClass @EnumExtensions.SpinnerTypeClassMap[Type] @EnumExtensions.SpinnerColorClassMap[Color] @Class" @attributes="@AdditionalAttributes" width="@spinnerSvg.Width" height="@spinnerSvg.Height" role="status" xmlns="http://www.w3.org/2000/svg">
            @if (!string.IsNullOrWhiteSpace(Title))
            {
                <title>@Title</title>
            }
            <circle cx="@spinnerSvg.Circles[0].Cx" cy="@spinnerSvg.Circles[0].Cy" r="@spinnerSvg.Circles[0].Radius"/>
            <circle cx="@spinnerSvg.Circles[1].Cx" cy="@spinnerSvg.Circles[1].Cy" r="@spinnerSvg.Circles[1].Radius"/>
            <circle cx="@spinnerSvg.Circles[2].Cx" cy="@spinnerSvg.Circles[2].Cy" r="@spinnerSvg.Circles[2].Radius"/>
        </svg>
    }
    else
    {
        <div id="@Id" class="@cssClass @EnumExtensions.SpinnerTypeClassMap[Type] @EnumExtensions.SpinnerColorClassMap[Color] @Class" @attributes="@AdditionalAttributes" role="status">
            <span class="visually-hidden">@VisuallyHiddenText</span>
        </div>
    }
}
