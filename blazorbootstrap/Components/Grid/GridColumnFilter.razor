@namespace BlazorBootstrap
@inherits BlazorBootstrapComponentBase

<div class="d-flex">
    <button type="button" class="btn @(EnumExtensions.ButtonColorClassMap[FilterButtonColor]) me-1 d-flex dropdown-toggle bb-grid-filter @FilterButtonCssClass" data-bs-toggle="dropdown" aria-expanded="false">
        <span class="me-2">
            <Icon Name="@(String.IsNullOrWhiteSpace(FilterValue) ? IconName.Funnel : IconName.FunnelFill)" />
        </span>
         <span>@selectedFilterSymbol</span>
    </button>
    <ul class="dropdown-menu"> 
        @foreach (var filter in filterOperators)
        {
            <li class="mx-1 rounded-3">
                <div class="dropdown-item p-1" role="button" @onclick="(async()=>await OnFilterOperatorChangedAsync(filter))">
                    <span class="filter-symbol">@filter.Symbol</span> <span>@filter.Text</span>
                </div>
            </li>
        } 
    </ul>

    @if (PropertyTypeName == StringConstants.PropertyTypeNameInt16
    || PropertyTypeName == StringConstants.PropertyTypeNameInt32
    || PropertyTypeName == StringConstants.PropertyTypeNameInt64
    || PropertyTypeName == StringConstants.PropertyTypeNameSingle // float
    || PropertyTypeName == StringConstants.PropertyTypeNameDecimal
    || PropertyTypeName == StringConstants.PropertyTypeNameDouble)
    {
        <input class="form-control" style="@FilterStyle" type="number" value="@FilterValue" @oninput="OnFilterValueChangedAsync">
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameDateOnly)
    {
        <input class="form-control" style="@FilterStyle" type="date" value="@FilterValue" @oninput="OnFilterValueChangedAsync" />
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameDateTime)
    {
        <input class="form-control" style="@FilterStyle" type="datetime-local" value="@FilterValue" @oninput="OnFilterValueChangedAsync" />
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameBoolean)
    {
        <input class="form-check-input" type="checkbox" value="@FilterValue" @onchange="OnFilterValueChangedAsync" />
    }
    else if (PropertyTypeName == StringConstants.PropertyTypeNameEnum)
    {
        <Dropdown>
            <DropdownToggleButton Class="px-1" style="@FilterStyle">
                @if (string.IsNullOrWhiteSpace(FilterValue))
                {
                    <span class="px-2">@EnumFilterSelectText</span>
                }
                else
                {
                    <span class="px-2">@FilterValue</span>
                }
            </DropdownToggleButton>
            <DropdownMenu Class="bb-dropdown-menu-enum" style="max-height: var(--bb-grid-filter-dropdown-max-height); overflow-x: hidden; overflow-y: auto;">
                @if (PropertyType is not null)
                {
                    @foreach (var item in Enum.GetValues(PropertyType!))
                    {
                        <DropdownItem @onclick="OnEnumFilterValueChangedAsync">@item</DropdownItem>
                    }
                }
            </DropdownMenu>
        </Dropdown>
    }
    else // guid or string
    {
        <input class="form-control" style="@FilterStyle" type="text" value="@FilterValue" @oninput="OnFilterValueChangedAsync" />
    }
</div>
