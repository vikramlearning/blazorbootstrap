@namespace BlazorBootstrap
@inherits BlazorBootstrapComponentBase
@typeparam TItem

<CascadingValue Value="@(this)" IsFixed="true">
    @ChildContent
</CascadingValue>

@if (columns.Any())
{
    <div class="@responsiveCssClass" style="@gridParentStyle" onscroll="@OnScroll">
        <table @ref="@Element" id="@Id" class="@ClassNames" style="@StyleNames" @attributes="@AdditionalAttributes">
            <thead class="@THeadCssClass">
                <tr class="@(FixedHeader ? BootstrapClass.TextNoWrap : "") @HeaderRowCssClass">
                    @if (AllowSelection)
                    {
                        @HeaderSelectionTemplate
                    }
                    @foreach (var column in columns)
                    {
                        @column.HeaderTemplate
                    }
                </tr>
                @if (AllowFiltering)
                {
                    <tr class="@FiltersRowCssClass">
                        @if (AllowSelection)
                        {
                            <th></th>
                        }
                        @foreach (var column in columns)
                        {
                            var columnClassList = new HashSet<string>();
                            var columnStyleList = new List<string>();

                            columnClassList.Add(column.Class!);
                            if (column.Freeze)
                            {
                                columnClassList.Add("freeze-column");

                                if (column.FreezeDirection == FreezeDirection.Left)
                                    columnStyleList.Add($"left:{column.FreezeLeftPosition.ToString(CultureInfo.InvariantCulture)}{Unit.ToCssString()}");
                                else
                                {
                                    columnStyleList.Add($"right:{column.FreezeRightPosition.ToString(CultureInfo.InvariantCulture)}{Unit.ToCssString()}");
                                    columnClassList.Add("freeze-column-right");
                                }
                            }

                            <th class="@string.Join(" ", columnClassList)" style="@string.Join(";", columnStyleList)">
                                @if (column.Filterable)
                                {
                                    <GridColumnFilter FilterOperator="@column.FilterOperator"
                                                      FilterValue="@column.FilterValue"
                                                      FilterWidth="@column.FilterTextboxWidth"
                                                      FiltersTranslationProvider="GridFiltersTranslationProviderAsync"
                                                      FixedHeader="@FixedHeader"
                                                      GridColumnFilterChanged="async args => await column.OnFilterChangedAsync(args, column)"
                                                      PropertyTypeName="@column.GetPropertyTypeName()"
                                                      PropertyInfo="@typeof(TItem).GetProperty(column.PropertyName)"
                                                      Unit="@Unit" />
                                }
                            </th>
                        }
                    </tr>
                }
            </thead>
            <tbody>
                @if (requestInProgress) //|| totalCount == null
                {
                    // show placeholders
                    @for (var i = 0; i < 5; i++)
                    {
                        <tr>
                            @for (var j = 0; j < columns.Count; j++)
                            {
                                <td class="placeholder-glow">
                                    <span class="placeholder col-12"></span>
                                </td>
                            }
                        </tr>
                    }
                }
                else if (totalCount == 0)
                {
                    // show empty
                    <tr>
                        @{
                            var columnCount = AllowSelection ? columns.Count + 1 : columns.Count;
                        }
                        <td colspan="@columnCount">
                            @if (EmptyDataTemplate == null)
                            {
                                <div class="text-center text-secondary my-5">
                                    <div class="fs-3">
                                        <Icon Name="IconName.Inbox" />
                                    </div>
                                    <div>@EmptyText</div>
                                </div>
                            }
                            else
                            {
                                <div class="my-3">
                                    @EmptyDataTemplate
                                </div>
                            }
                        </td>
                    </tr>
                }
                else if (totalCount > 0)
                {
                    if (items != null)
                    {
                        var rowIndex = 0;
                        foreach (var item in items)
                        {
                            var rowClass = RowClass?.Invoke(item) ?? "";
                            <tr @key="item?.GetHashCode()" class="@rowClass" @onclick="args => RowClick(item, args)" @ondblclick="args => RowDoubleClick(item, args)" role="@(AllowRowClick ? "button" : "")">
                                @if (AllowSelection)
                                {
                                    @ChildSelectionTemplate(rowIndex, item)
                                }

                                @foreach (var column in columns)
                                {
                                    @column.CellTemplate(item)
                                }
                            </tr>
                            rowIndex++;
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    @if (AllowPaging && totalCount.HasValue && totalCount.Value > 0 && (!AutoHidePaging || (AutoHidePaging && totalCount.Value > pageSize)))
    {
        <div class="d-flex justify-content-between align-middle mt-2">
            <Pagination ActivePageNumber="@gridCurrentState.PageIndex"
                        TotalPages="@totalPages"
                        PageChanged="OnPageChangedAsync"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        Alignment="Alignment.Start" />

            @if (PageSizeSelectorVisible && PageSizeSelectorItems is not null && PageSizeSelectorItems.Any())
            {
                <div>
                    <div class="d-flex justify-content-center align-middle">
                        <div>
                            <InputSelect class="form-select" role="button" TValue="int" Value="@pageSize" ValueExpression="() => pageSize" ValueChanged="async (value) => await OnPageSizeChangedAsync(value)">
                                @foreach (var i in PageSizeSelectorItems)
                                {
                                    <option value="@i">@i</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="bb-grid-pagination-text">@ItemsPerPageText</div>
                    </div>
                </div>
            }

            <div class="bb-grid-pagination-text">
                @paginationItemsText
            </div>
        </div>
    }
}
