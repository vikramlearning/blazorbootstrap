
<Grid TItem="Employee" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" Responsive="true">
    <GridColumn TItem="Employee"
                HeaderText="Id" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center"
                SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true"
                PropertyName="Id" FilterValue="103" FilterOperator="FilterOperator.GreaterThan" FilterTextboxWidth="80">
        @context.Id
    </GridColumn>
    <GridColumn TItem="Employee" HeaderText="First Name"
                SortKeySelector="@(item => item.FirstName)"
                PropertyName="FirstName" FilterTextboxWidth="80">
        @context.FirstName
    </GridColumn>
    <GridColumn TItem="Employee" HeaderText="Last Name" SortKeySelector="@(item => item.LastName)" PropertyName="LastName" FilterTextboxWidth="80">
        @context.LastName
    </GridColumn>
    <GridColumn TItem="Employee" HeaderText="Designation" TextNoWrap="true" SortKeySelector="@(item => item.Designation)" PropertyName="Designation" FilterTextboxWidth="80">
        @context.Designation
    </GridColumn>
    <GridColumn TItem="Employee" HeaderText="Salary" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End" SortKeySelector="@(item => item.Salary)" PropertyName="Salary" FilterTextboxWidth="80">
        @context.Salary.ToString("N2")
    </GridColumn>
    <GridColumn TItem="Employee" HeaderText="DOJ" SortKeySelector="@(item => item.DOJ)" PropertyName="DOJ">
        @context.DOJ
    </GridColumn>
    <GridColumn TItem="Employee" HeaderText="Active" SortKeySelector="@(item => item.IsActive)" PropertyName="IsActive">
        @context.IsActive
    </GridColumn>
</Grid>

@code {
    private IEnumerable<Employee> employees;

    protected override void OnInitialized()
    {
        employees = new List<Employee>
        {
            new Employee { Id = 107, FirstName = "Alice", LastName = "Reddy", Designation = "AI Engineer", Salary = 8000, DOJ = new DateTime(1998, 11, 17), IsActive = true },
            new Employee { Id = 103, FirstName = "Bob", LastName = "Roy", Designation = "Senior DevOps Engineer", Salary = 14000, DOJ = new DateTime(1985, 1, 5), IsActive = true },
            new Employee { Id = 106, FirstName = "John", LastName = "Papa", Designation = "Data Engineer", Salary = 6000, DOJ = new DateTime(1995, 4, 17), IsActive = true },
            new Employee { Id = 104, FirstName = "Pop", LastName = "Two", Designation = "Associate Architect", Salary = 17000, DOJ = new DateTime(1985, 6, 8), IsActive = false },
            new Employee { Id = 105, FirstName = "Ronald", LastName = "Dire", Designation = "Senior Data Engineer", Salary = 12000, DOJ = new DateTime(1991, 8, 23), IsActive = true },
            new Employee { Id = 102, FirstName = "Line", LastName = "K", Designation = "Architect", Salary = 20000, DOJ = new DateTime(1977, 1, 12), IsActive = true },
            new Employee { Id = 101, FirstName = "Daniel", LastName = "K", Designation = "Architect", Salary = 20000, DOJ = new DateTime(1977, 1, 12), IsActive = true }
        };
    }

    private async Task<GridDataProviderResult<Employee>> EmployeesDataProvider(GridDataProviderRequest<Employee> request)
    {
        return await Task.FromResult(request.ApplyTo(employees));
    }
}
