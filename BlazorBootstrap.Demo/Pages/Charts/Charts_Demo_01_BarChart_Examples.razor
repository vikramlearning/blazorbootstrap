@using BlazorBootstrap.Extensions
@using Color = System.Drawing.Color

<BarChart @ref="barChart" Class="mb-4" />

<Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await AddData()">Add Data</Button>

@code {
    private BarChart barChart;

    private ChartData chartData;
    private ChartOptions chartOptions;

    Random random = new Random();

    protected override void OnInitialized()
    {
        chartData = new ChartData
            {
                Labels = new List<string> { "January", "February", "March", "April", "May", "June", "July" },
                Datasets = new List<IChartDataset>()
                {
                    new BarChartDataset()
                    {
                        Label = "Bar chart dataset 1",
                        Data = new List<double> { random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120) },
                        BackgroundColor = new List<string> { GetRandomBackgroundColor() },
                        BorderWidth = new List<double>{ 0 },
                        CategoryPercentage = 0.8,
                        BarPercentage = 1,
                    },
                    new BarChartDataset()
                    {
                        Label = "Bar chart dataset 2",
                        Data = new List<double> { random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120) },
                        BackgroundColor = new List<string> { GetRandomBackgroundColor() },
                        BorderWidth = new List<double>{ 0 },
                    },
                    new BarChartDataset()
                    {
                        Label = "Bar chart dataset 3",
                        Data = new List<double> { random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120) },
                        BackgroundColor = new List<string> { GetRandomBackgroundColor() },
                        BorderWidth = new List<double> { 0 },
                    }
                }
            };
        chartOptions = new ChartOptions { Responsive = true };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, chartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddData()
    {
        if (chartData is null) return;

        chartData.Datasets.Add(
            new BarChartDataset()
                {
                    Label = $"Bar chart dataset {chartData.Datasets.Count + 1}",
                    Data = new List<double> { random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120), random.Next(120) },
                    BackgroundColor = new List<string> { GetRandomBackgroundColor() },
                    BorderWidth = new List<double> { 0 },
                });

        await barChart.UpdateAsync(chartData, chartOptions);
    }

    private string GetRandomBackgroundColor()
    {
        var c = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
        Console.WriteLine($"Color Name: {c.Name}, HEX: {c.ToHexString()}, RGB: {c.ToRgbString()}, IsNamedColor: {c.IsNamedColor}");
        return c.ToRgbString();
    }
}
