"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[22965],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>u});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=o.createContext({}),l=function(t){var e=o.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},d=function(t){var e=l(t.components);return o.createElement(c.Provider,{value:e},t.children)},h="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},p=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,c=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),h=l(n),p=a,u=h["".concat(c,".").concat(p)]||h[p]||m[p]||i;return n?o.createElement(u,r(r({ref:e},d),{},{components:n})):o.createElement(u,r({ref:e},d))}));function u(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,r=new Array(i);r[0]=p;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[h]="string"==typeof t?t:a,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},74404:(t,e,n)=>{n.d(e,{ZP:()=>d});var o=n(87462),a=n(67294),i=n(3905);class r extends a.Component{constructor(t){super(t),this.name=this.props.name||"docsblazorbootstrapcom",this.serve=this.props.serve||"CW7ILK7W",this.script=this.props.script||null,this.placement=this.props.placement||"",this.format=this.props.format||"cover",this.fallback=this.props.fallback||null,this.showFallback=!1}adShowing=()=>null!==document.getElementById(`${this.name} #carbonads`);componentDidMount=()=>{let t=document.createElement("script");t.defer=!!this.script,t.async=!0,t.id=this.script?"":"_carbonads_js",t.type="text/javascript",t.src=this.script||`//cdn.carbonads.com/carbon.js?serve=${this.serve}&placement=${this.placement}&format=${this.format}`,t.onerror=()=>{this.showFallback=!0,this.forceUpdate()},t.addEventListener("load",(()=>{this.adShowing||_.invoke(window._carbonads,"refresh")})),document.querySelector(`#${this.name}`).appendChild(t)};render(){return this.showFallback&&this.fallback?this.fallback:a.createElement("div",{id:this.name})}}const s=r,c={toc:[]},l="wrapper";function d(t){let{components:e,...n}=t;return(0,i.kt)(l,(0,o.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)(s,{mdxType:"CarbonAd"}))}d.isMDXComponent=!0},33051:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var o=n(87462),a=(n(67294),n(3905)),i=n(74404);const r={title:"Blazor Accordion Component",description:"Build vertically collapsing accordions in combination with our Collapse component.",image:"https://i.imgur.com/g4zpMXp.png",sidebar_label:"Accordion",sidebar_position:1},s="Blazor Accordion",c={unversionedId:"components/accordion",id:"components/accordion",title:"Blazor Accordion Component",description:"Build vertically collapsing accordions in combination with our Collapse component.",source:"@site/docs/05-components/accordion.mdx",sourceDirName:"05-components",slug:"/components/accordion",permalink:"/components/accordion",draft:!1,editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/05-components/accordion.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Blazor Accordion Component",description:"Build vertically collapsing accordions in combination with our Collapse component.",image:"https://i.imgur.com/g4zpMXp.png",sidebar_label:"Accordion",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Time Input",permalink:"/forms/time-input"},next:{title:"Alerts",permalink:"/components/alerts"}},l={},d=[{value:"Accordion Parameters",id:"accordion-parameters",level:2},{value:"Accordion Methods",id:"accordion-methods",level:2},{value:"Accordion Events",id:"accordion-events",level:2},{value:"AccordionItem Parameters",id:"accordionitem-parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Accordion",id:"accordion",level:3},{value:"Title with Icon",id:"title-with-icon",level:3},{value:"Flush",id:"flush",level:3},{value:"Set default active accordion item",id:"set-default-active-accordion-item",level:3},{value:"Always open",id:"always-open",level:3},{value:"Show / hide individual accordion items",id:"show--hide-individual-accordion-items",level:3},{value:"Show / hide all accordion items",id:"show--hide-all-accordion-items",level:3},{value:"Events Example",id:"events-example",level:3}],h={toc:d},m="wrapper";function p(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,o.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blazor-accordion"},"Blazor Accordion"),(0,a.kt)("p",null,"Build vertically collapsing accordions in combination with our Collapse component."),(0,a.kt)(i.ZP,{mdxType:"CarbonAd"}),(0,a.kt)("img",{src:"https://i.imgur.com/g4zpMXp.png",alt:"Blazor Bootstrap: Accordion Component"}),(0,a.kt)("h2",{id:"accordion-parameters"},"Accordion Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"AlwaysOpen"),(0,a.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"If true, accordion items stay open when another item is opened."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ChildContent"),(0,a.kt)("td",{parentName:"tr",align:"left"},"RenderFragment"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the content to be rendered within the component."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Flush"),(0,a.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"If true, removes borders and rounded corners to render accordions edge-to-edge with their parent container."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")))),(0,a.kt)("h2",{id:"accordion-methods"},"Accordion Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"HideAccordionItemByIndexAsync(int index)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Hides the ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem")," by index."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.10.5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"HideAccordionItemByNameAsync(string accordionItemName)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Hides the ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem")," by name."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.10.5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"HideAllAccordionItemsAsync()"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Hides all ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem")," instances."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.10.5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"HideFirstAccordionItemAsync()"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Hides the first ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem"),"."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.10.5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"HideLastAccordionItemAsync()"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Hides the last ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem"),"."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.10.5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ShowAccordionItemByIndexAsync(int index)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Shows the ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem")," by index."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ShowAccordionItemByNameAsync(string accordionItemName)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Shows the ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem")," by name."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ShowAllAccordionItemsAsync()"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Shows all ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem")," instances if ",(0,a.kt)("inlineCode",{parentName:"td"},"AlwaysOpen")," is true."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.10.5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ShowFirstAccordionItemAsync()"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Shows the first ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem"),"."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ShowLastAccordionItemAsync()"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Shows the last ",(0,a.kt)("inlineCode",{parentName:"td"},"AccordionItem"),"."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")))),(0,a.kt)("h2",{id:"accordion-events"},"Accordion Events"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"OnHidden"),(0,a.kt)("td",{parentName:"tr",align:"left"},"This event is fired when a accordion item has been hidden from the user (will wait for CSS transitions to complete)."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"OnHiding"),(0,a.kt)("td",{parentName:"tr",align:"left"},"This event is fired immediately when the hide method has been called."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"OnShowing"),(0,a.kt)("td",{parentName:"tr",align:"left"},"This event fires immediately when the show method is called."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"OnShown"),(0,a.kt)("td",{parentName:"tr",align:"left"},"This event is fired when a accordion item has been made visible to the user (will wait for CSS transitions to complete)."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")))),(0,a.kt)("h2",{id:"accordionitem-parameters"},"AccordionItem Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Active"),(0,a.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the active state."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Content"),(0,a.kt)("td",{parentName:"tr",align:"left"},"RenderFragment"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null"),(0,a.kt)("td",{parentName:"tr",align:"left"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the content to be rendered within the component."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("td",{parentName:"tr",align:"left"},"string"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the name."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"Title"),(0,a.kt)("td",{parentName:"tr",align:"left"},"string"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the title."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"TitleTemplate"),(0,a.kt)("td",{parentName:"tr",align:"left"},"RenderFragment"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the title template."),(0,a.kt)("td",{parentName:"tr",align:"left"},"1.7.0")))),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"accordion"},"Accordion"),(0,a.kt)("p",null,"Click the accordions below to expand/collapse the accordion content."),(0,a.kt)("img",{src:"https://i.imgur.com/IcfmBek.png",alt:"Blazor Bootstrap: Accordion Component - Examples"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"<Accordion>\n    <AccordionItem Title=\"Accordion Item #1\">\n        <Content>\n            <b>This is the first item's accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title=\"Accordion Item #2\">\n        <Content>\n            <b>This is the second item's accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title=\"Accordion Item #3\">\n        <Content>\n            <b>This is the third item's accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#examples"},"See demo here.")),(0,a.kt)("h3",{id:"title-with-icon"},"Title with Icon"),(0,a.kt)("p",null,"To customize the accordion title, use ",(0,a.kt)("inlineCode",{parentName:"p"},"TitleTemplate"),", as shown in the below example."),(0,a.kt)("img",{src:"https://i.imgur.com/nkIyXbb.png",alt:"Blazor Bootstrap: Accordion Component - Title with Icon"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion>\n    <AccordionItem>\n        <TitleTemplate>\n            <Icon Name="IconName.HouseFill" Class="me-1" /> Accordion Item #1\n        </TitleTemplate>\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem>\n        <TitleTemplate>\n            <Icon Name="IconName.PersonFill" Class="me-1" /> Accordion Item #2\n        </TitleTemplate>\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem>\n        <TitleTemplate>\n            <Icon Name="IconName.PhoneFill" Class="me-1" /> Accordion Item #3\n        </TitleTemplate>\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#title-with-icon"},"See demo here.")),(0,a.kt)("h3",{id:"flush"},"Flush"),(0,a.kt)("p",null,"Set the ",(0,a.kt)("inlineCode",{parentName:"p"},"Flush")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to remove borders and rounded corners to render accordions edge-to-edge with their parent container."),(0,a.kt)("img",{src:"https://i.imgur.com/8yqF7iY.png",alt:"Blazor Bootstrap: Accordion Component - Flush"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion Flush="true">\n    <AccordionItem Title="Accordion Item #1">\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #2">\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #3">\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#flush"},"See demo here.")),(0,a.kt)("h3",{id:"set-default-active-accordion-item"},"Set default active accordion item"),(0,a.kt)("p",null,"Set the ",(0,a.kt)("inlineCode",{parentName:"p"},"Active")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to keep the accordion item open by default."),(0,a.kt)("img",{src:"https://i.imgur.com/FkbNpZN.png",alt:"Blazor Bootstrap: Accordion Component - Set default active accordion item"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion>\n    <AccordionItem Title="Accordion Item #1">\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #2" Active="true">\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #3">\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#set-default-active-accordion-item"},"See demo here.")),(0,a.kt)("h3",{id:"always-open"},"Always open"),(0,a.kt)("p",null,"Set the ",(0,a.kt)("inlineCode",{parentName:"p"},"AlwaysOpen")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to keep accordion items open when another item is opened."),(0,a.kt)("img",{src:"https://i.imgur.com/E2AbjKh.png",alt:"Blazor Bootstrap: Accordion Component - Always open"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion AlwaysOpen="true">\n    <AccordionItem Title="Accordion Item #1">\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #2">\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #3">\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#always-open"},"See demo here.")),(0,a.kt)("h3",{id:"show--hide-individual-accordion-items"},"Show / hide individual accordion items"),(0,a.kt)("p",null,"You can show and hide individual accordion items in several ways."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To show an accordion item, use predefined methods ",(0,a.kt)("inlineCode",{parentName:"li"},"ShowFirstAccordionItemAsync"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ShowLastAccordionItemAsync"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"ShowAccordionItemByNameAsync"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"ShowAccordionItemByIndexAsync"),"."),(0,a.kt)("li",{parentName:"ul"},"To hide an accordion item, use predefined methods ",(0,a.kt)("inlineCode",{parentName:"li"},"HideFirstAccordionItemAsync"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"HideLastAccordionItemAsync"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"HideAccordionItemByNameAsync"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"HideAccordionItemByIndexAsync"),".")),(0,a.kt)("img",{src:"https://i.imgur.com/Xx2g2Ul.png",alt:"Blazor Bootstrap: Accordion Component - Show / hide individual accordion items"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion @ref="accordion1" Class="mb-3">\n    <AccordionItem Title="Home" Name="AccordionItem1">\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Profile" Name="AccordionItem2">\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Contact" Name="AccordionItem3">\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Products" Name="Products">\n        <Content>\n            <b>This is the fourth item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="FAQs" Name="FAQ">\n        <Content>\n            <b>This is the fifth item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="About" Name="AccordionItem6">\n        <Content>\n            <b>This is the sixth item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n\n<h4>Show</h4>\n\n<Button Color="ButtonColor.Primary" @onclick="ShowFirstAccordionItemAsync">First Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="ShowSecondAccordionItemAsync">Second Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="ShowThirdAccordionItemAsync">Third Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="ShowProductsAccordionItemAsync">Products Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="ShowFaqsAccordionItemAsync">FAQs Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="ShowLastAccordionItemAsync">Last Accordion Item</Button>\n\n<h4 class="mt-2">Hide</h4>\n\n<Button Color="ButtonColor.Primary" @onclick="HideFirstAccordionItemAsync">First Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="HideSecondAccordionItemAsync">Second Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="HideThirdAccordionItemAsync">Third Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="HideProductsAccordionItemAsync">Products Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="HideFaqsAccordionItemAsync">FAQs Accordion Item</Button>\n<Button Color="ButtonColor.Primary" @onclick="HideLastAccordionItemAsync">Last Accordion Item</Button>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    private Accordion accordion1 = default!;\n\n    private async Task ShowFirstAccordionItemAsync() => await accordion1.ShowFirstAccordionItemAsync();\n    private async Task ShowSecondAccordionItemAsync() => await accordion1.ShowAccordionItemByIndexAsync(1);\n    private async Task ShowThirdAccordionItemAsync() => await accordion1.ShowAccordionItemByIndexAsync(2);\n    private async Task ShowProductsAccordionItemAsync() => await accordion1.ShowAccordionItemByNameAsync("Products");\n    private async Task ShowFaqsAccordionItemAsync() => await accordion1.ShowAccordionItemByNameAsync("FAQ");\n    private async Task ShowLastAccordionItemAsync() => await accordion1.ShowLastAccordionItemAsync();\n\n    private async Task HideFirstAccordionItemAsync() => await accordion1.HideFirstAccordionItemAsync();\n    private async Task HideSecondAccordionItemAsync() => await accordion1.HideAccordionItemByIndexAsync(1);\n    private async Task HideThirdAccordionItemAsync() => await accordion1.HideAccordionItemByIndexAsync(2);\n    private async Task HideProductsAccordionItemAsync() => await accordion1.HideAccordionItemByNameAsync("Products");\n    private async Task HideFaqsAccordionItemAsync() => await accordion1.HideAccordionItemByNameAsync("FAQ");\n    private async Task HideLastAccordionItemAsync() => await accordion1.HideLastAccordionItemAsync();\n}\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#show-hide-individual-accordion-items"},"See demo here.")),(0,a.kt)("h3",{id:"show--hide-all-accordion-items"},"Show / hide all accordion items"),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"AlwaysOpen")," parameter is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", you can show all accordion items simultaneously using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ShowAllAccordionItemsAsync")," method.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"HideAllAccordionItemsAsync")," method will hide all accordion items, regardless of the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"AlwaysOpen"),"."),(0,a.kt)("img",{src:"https://i.imgur.com/lFAcglH.png",alt:"Blazor Bootstrap: Accordion Component - Show / hide all accordion items"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion AlwaysOpen="true" @ref="accordion1" class="mb-2">\n    <AccordionItem Title="Accordion Item #1">\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #2">\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #3">\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n\n<Button Color="ButtonColor.Primary" @onclick="ShowAllAccordionItemsAsync">Show All Accordion Items</Button>\n<Button Color="ButtonColor.Primary" @onclick="HideAllAccordionItemsAsync">Hide All Accordion Items</Button>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    private Accordion accordion1 = default!;\n\n    private Task ShowAllAccordionItemsAsync() => accordion1.ShowAllAccordionItemsAsync();\n    private Task HideAllAccordionItemsAsync() => accordion1.HideAllAccordionItemsAsync();\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#show-hide-individual-accordion-items"},"See demo here.")),(0,a.kt)("h3",{id:"events-example"},"Events Example"),(0,a.kt)("p",null,"Blazor Bootstrap Accordion component exposes a few events for hooking into accordion functionality."),(0,a.kt)("img",{src:"https://i.imgur.com/IcfmBek.png",alt:"Blazor Bootstrap: Accordion Component - Events Example"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Accordion @ref="accordion1"\n           OnShowing="OnShowingAsync"\n           OnShown="OnShownAsync"\n           OnHiding="OnHidingAsync"\n           OnHidden="OnHiddenAsync">\n    <AccordionItem Title="Accordion Item #1" Name="AccordionItem1">\n        <Content>\n            <b>This is the first item\'s accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #2" Name="AccordionItem2">\n        <Content>\n            <b>This is the second item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n    <AccordionItem Title="Accordion Item #3" Name="AccordionItem3">\n        <Content>\n            <b>This is the third item\'s accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It\'s also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.\n        </Content>\n    </AccordionItem>\n</Accordion>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    private Accordion accordion1 = default!;\n\n    [Inject] ToastService ToastService { get; set; } = default!;\n\n    private void OnShowingAsync(AccordionEventArgs args)\n    {\n        ToastService.Notify(new ToastMessage(\n            type: ToastType.Primary,\n            message: $"Event Name: Showing, AccordionItemName: {args.Name}, AccordionItemTitle: {args.Title}"));\n    }\n\n    private void OnShownAsync(AccordionEventArgs args)\n    {\n        ToastService.Notify(new ToastMessage(\n            type: ToastType.Primary,\n            message: $"Event Name: OnShown, AccordionItemName: {args.Name}, AccordionItemTitle: {args.Title}"));\n    }\n\n    private void OnHidingAsync(AccordionEventArgs args)\n    {\n        ToastService.Notify(new ToastMessage(\n            type: ToastType.Primary,\n            message: $"Event Name: OnHiding, AccordionItemName: {args.Name}, AccordionItemTitle: {args.Title}"));\n    }\n\n    private void OnHiddenAsync(AccordionEventArgs args)\n    {\n        ToastService.Notify(new ToastMessage(\n            type: ToastType.Primary,\n            message: $"Event Name: OnHidden, AccordionItemName: {args.Name}, AccordionItemTitle: {args.Title}"));\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/accordion#events"},"See demo here.")))}p.isMDXComponent=!0}}]);