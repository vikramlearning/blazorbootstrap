"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[63253],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=m(a),g=r,c=d["".concat(s,".").concat(g)]||d[g]||u[g]||l;return a?n.createElement(c,i(i({ref:t},p),{},{components:a})):n.createElement(c,i({ref:t},p))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},74404:(e,t,a)=>{a.d(t,{ZP:()=>p});var n=a(87462),r=a(67294),l=a(3905);class i extends r.Component{constructor(e){super(e),this.name=this.props.name||"docsblazorbootstrapcom",this.serve=this.props.serve||"CW7ILK7W",this.script=this.props.script||null,this.placement=this.props.placement||"",this.format=this.props.format||"cover",this.fallback=this.props.fallback||null,this.showFallback=!1}adShowing=()=>null!==document.getElementById(`${this.name} #carbonads`);componentDidMount=()=>{let e=document.createElement("script");e.defer=!!this.script,e.async=!0,e.id=this.script?"":"_carbonads_js",e.type="text/javascript",e.src=this.script||`//cdn.carbonads.com/carbon.js?serve=${this.serve}&placement=${this.placement}&format=${this.format}`,e.onerror=()=>{this.showFallback=!0,this.forceUpdate()},e.addEventListener("load",(()=>{this.adShowing||_.invoke(window._carbonads,"refresh")})),document.querySelector(`#${this.name}`).appendChild(e)};render(){return this.showFallback&&this.fallback?this.fallback:r.createElement("div",{id:this.name})}}const o=i,s={toc:[]},m="wrapper";function p(e){let{components:t,...a}=e;return(0,l.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(o,{mdxType:"CarbonAd"}))}p.isMDXComponent=!0},48569:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),l=a(74404);const i={title:"Blazor Range Input Component",description:'Blazor Bootstrap `NumberInput` component is built around HTML input of `type="number"` that prevents the user input based on the parameters set.',image:"https://i.imgur.com/rWDDHaf.png",sidebar_label:"Range Input",sidebar_position:8},o="Blazor Range Input",s={unversionedId:"forms/range-input",id:"forms/range-input",title:"Blazor Range Input Component",description:'Blazor Bootstrap `NumberInput` component is built around HTML input of `type="number"` that prevents the user input based on the parameters set.',source:"@site/docs/04-forms/range-input.mdx",sourceDirName:"04-forms",slug:"/forms/range-input",permalink:"/forms/range-input",draft:!1,editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/04-forms/range-input.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Blazor Range Input Component",description:'Blazor Bootstrap `NumberInput` component is built around HTML input of `type="number"` that prevents the user input based on the parameters set.',image:"https://i.imgur.com/rWDDHaf.png",sidebar_label:"Range Input",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Radio Input",permalink:"/forms/radio-input"},next:{title:"Switch",permalink:"/forms/switch"}},m={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"Events",id:"events",level:2},{value:"TickMark Properties",id:"tickmark-properties",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Disabled",id:"disabled",level:3},{value:"Min and max",id:"min-and-max",level:3},{value:"Step",id:"step",level:3},{value:"Decimal values",id:"decimal-values",level:3},{value:"Tick marks",id:"tick-marks",level:3}],d={toc:p},u="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blazor-range-input"},"Blazor Range Input"),(0,r.kt)("p",null,"Blazor Bootstrap ",(0,r.kt)("inlineCode",{parentName:"p"},"RangeInput")," component is built around HTML input of ",(0,r.kt)("inlineCode",{parentName:"p"},'type="range"'),"."),(0,r.kt)(l.ZP,{mdxType:"CarbonAd"}),(0,r.kt)("img",{src:"https://i.imgur.com/rWDDHaf.png",alt:"Blazor Bootstrap: Range Input Component"}),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the disabled state."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Max"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TValue"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the maximum value of the range input."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Min"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TValue"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the minimum value of the range input."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Step"),(0,r.kt)("td",{parentName:"tr",align:"left"},"double"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the step value of the range input."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TickMarks"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IEnumerable<TickMark>")),(0,r.kt)("td",{parentName:"tr",align:"left"},"null"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the tick marks."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("td",{parentName:"tr",align:"left"},"TValue"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the value of the range input."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Disable()"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Disables range input."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Enable()"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enables range input."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"ValueChanged"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This event fires when the user specifies a numeric value."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")))),(0,r.kt)("h2",{id:"tickmark-properties"},"TickMark Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Label"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string?")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the label."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string?")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the value."),(0,r.kt)("td",{parentName:"tr",align:"left"},"1.10.6")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,r.kt)("img",{src:"https://i.imgur.com/SztD1ZU.png",alt:"Blazor Bootstrap: Range Input Component - Basic usage"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1} showLineNumbers","{1}":!0,showLineNumbers:!0},'<RangeInput TValue="int" @bind-Value="amount1" Min="0" Max="100" />\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{2} showLineNumbers","{2}":!0,showLineNumbers:!0},"@code {\n    int amount1 = 10;\n}\n")),(0,r.kt)("img",{src:"https://i.imgur.com/nxvWYE4.png",alt:"Blazor Bootstrap: Range Input Component - Multiple"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{2,6,10,14} showLineNumbers","{2,6,10,14}":!0,showLineNumbers:!0},'<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="int" @bind-Value="amount1" Min="0" Max="100" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount1">@amount1</Badge>\n</div>\n<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="int?" @bind-Value="amount2" Min="0" Max="100" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount2">@amount2</Badge>\n</div>\n<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="float" @bind-Value="amount3" Min="0" Max="100" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount3">@amount3</Badge>\n</div>\n<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="float?" @bind-Value="amount4" Min="0" Max="100" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount4">@amount4</Badge>\n</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    int amount1 = 10;\n    int? amount2 = 20;\n    float amount3 = 30;\n    float? amount4 = 40;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/form/range-input#basic-usage"},"See demo here")),(0,r.kt)("h3",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Disabled")," parameter to disable the ",(0,r.kt)("inlineCode",{parentName:"p"},"RangeInput"),"."),(0,r.kt)("img",{src:"https://i.imgur.com/lVl4D7H.png",alt:"Blazor Bootstrap: Range Input Component - Disabled parameter"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{5} showLineNumbers","{5}":!0,showLineNumbers:!0},'<div class="mb-3">\n    <label class="form-label">Amount</label>\n    <RangeInput TValue="int?" \n                @bind-Value="amount" \n                Disabled="@disabled" \n                Min="0" \n                Max="100" />\n</div>\n\n<Button Color="ButtonColor.Primary" @onclick="Enable"> Enable </Button>\n<Button Color="ButtonColor.Secondary" @onclick="Disable"> Disable </Button>\n<Button Color="ButtonColor.Warning" @onclick="Toggle"> Toggle </Button>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{5-7} showLineNumbers","{5-7}":!0,showLineNumbers:!0},"@code {\n    private int? amount = 10;\n    private bool disabled = true;\n\n    private void Enable() => disabled = false;\n    private void Disable() => disabled = true;\n    private void Toggle() => disabled = !disabled;\n}\n")),(0,r.kt)("p",null,"Also, use ",(0,r.kt)("inlineCode",{parentName:"p"},"Enable()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Disable()")," methods to enable and disable the ",(0,r.kt)("inlineCode",{parentName:"p"},"RangeInput"),"."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Do not use both the ",(0,r.kt)("inlineCode",{parentName:"p"},"Disabled")," parameter and ",(0,r.kt)("inlineCode",{parentName:"p"},"Enable()")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"Disable()")," methods.")),(0,r.kt)("img",{src:"https://i.imgur.com/Xmo0wwM.png",alt:"Blazor Bootstrap: Range Input Component - Disable method"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<div class="mb-3">\n    <label class="form-label">Amount</label>\n    <RangeInput @ref="rangeInput"\n                TValue="int?"\n                @bind-Value="amount"\n                Min="0"\n                Max="100" />\n</div>\n\n<Button Color="ButtonColor.Secondary" @onclick="Disable"> Disable </Button>\n<Button Color="ButtonColor.Primary" @onclick="Enable"> Enable </Button>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{4,5} showLineNumbers","{4,5}":!0,showLineNumbers:!0},"@code {\n    private RangeInput<int?> rangeInput = default!;\n    private int? amount = 10;\n    private void Disable() => rangeInput.Disable();\n    private void Enable() => rangeInput.Enable();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/form/range-input#disabled"},"See demo here")),(0,r.kt)("h3",{id:"min-and-max"},"Min and max"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"Min")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Max")," parameters to restrict the user input between the ",(0,r.kt)("inlineCode",{parentName:"p"},"Min")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Max")," range. By default, the minimum is 0."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"By default the maximum is 100 for ",(0,r.kt)("inlineCode",{parentName:"p"},"sbyte?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"short?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"long?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"float?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"double?")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"decimal?")," data types. For other data types it is 0."),(0,r.kt)("p",{parentName:"admonition"},"If the user tries to specify a numeric value which is out of range, then it will override with ",(0,r.kt)("inlineCode",{parentName:"p"},"Min")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Max")," value based on the context. If the user input is less than the minimum value, then it will override with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Min")," value. If the user input exceeds the maximum value, it will override with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Max")," value.")),(0,r.kt)("img",{src:"https://i.imgur.com/F3aLA65.png",alt:"Blazor Bootstrap: Range Input Component - Min and max"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{2} showLineNumbers","{2}":!0,showLineNumbers:!0},'<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="int" @bind-Value="amount1" Min="-10" Max="10" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount1">@amount1</Badge>\n</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    int amount1 = -3;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/form/range-input#min-and-max"},"See demo here")),(0,r.kt)("h3",{id:"step"},"Step"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Step")," parameter is a number that specifies the granularity that the value must adhere to. Only values that match the specified stepping interval are valid."),(0,r.kt)("img",{src:"https://i.imgur.com/QTuu33z.png",alt:"Blazor Bootstrap: Range Input Component - Step"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{6,10,14} showLineNumbers","{6,10,14}":!0,showLineNumbers:!0},'<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="int" @bind-Value="amount1" Min="0" Max="100" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount1">@amount1</Badge>\n</div>\n<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="int?" @bind-Value="amount2" Min="0" Max="100" Step="5" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount2">@amount2</Badge>\n</div>\n<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="float" @bind-Value="amount3" Min="0" Max="100" Step="10" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount3">@amount3</Badge>\n</div>\n<div class="d-flex flex-row mb-3">\n    <RangeInput TValue="float?" @bind-Value="amount4" Min="0" Max="100" Step="20" />\n    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount4">@amount4</Badge>\n</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    int amount1 = 10;\n    int? amount2 = 20;\n    float amount3 = 30;\n    float? amount4 = 40;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/form/range-input#step"},"See demo here")),(0,r.kt)("h3",{id:"decimal-values"},"Decimal values"),(0,r.kt)("img",{src:"https://i.imgur.com/Z6v6dqw.png",alt:"Blazor Bootstrap: Range Input Component - Decimal values"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<RangeInput TValue="decimal" @bind-Value="amount1" Min="0" Max="100" Step="0.01" />\n<div class="mt-2">@amount1</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    decimal amount1 = 0;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/form/range-input#decimal-values"},"See demo here")),(0,r.kt)("h3",{id:"tick-marks"},"Tick marks"),(0,r.kt)("p",null,"To add tick marks to a ",(0,r.kt)("inlineCode",{parentName:"p"},"RangeInput"),", set the ",(0,r.kt)("inlineCode",{parentName:"p"},"TickMarks")," parameter."),(0,r.kt)("img",{src:"https://i.imgur.com/dcMBuxT.png",alt:"Blazor Bootstrap: Range Input Component - Tick marks"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{3} showLineNumbers","{3}":!0,showLineNumbers:!0},'<div class="d-flex mb-3">\n    <div class="flex-fill">\n        <RangeInput TValue="float" @bind-Value="temperature1" Min="0" Max="100" TickMarks="list" />\n    </div>\n</div>\n<Badge Color="BadgeColor.Primary" Class="mx-2" VisuallyHiddenText="amount1">@temperature1</Badge>\n<span>Fahrenheit</span>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{4-11} showLineNumbers","{4-11}":!0,showLineNumbers:!0},'@code {\n    float temperature1 = 10;\n\n    IEnumerable<TickMark> list = new List<TickMark>\n    {\n        new(){ Label = "very cold!", Value = "0"},\n        new(){ Label = "cool", Value = "25"},\n        new(){ Label = "medium", Value = "50"},\n        new(){ Label = "getting warm!", Value = "75"},\n        new(){ Label = "hot!", Value = "100"},\n    };\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/form/range-input#tick-marks"},"See demo here")))}g.isMDXComponent=!0}}]);