"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[10074],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(n),c=l,b=d["".concat(o,".").concat(c)]||d[c]||g[c]||r;return n?a.createElement(b,i(i({ref:t},p),{},{components:n})):a.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:l,i[1]=s;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74404:(e,t,n)=>{n.d(t,{ZP:()=>p});var a=n(87462),l=n(67294),r=n(3905);class i extends l.Component{constructor(e){super(e),this.name=this.props.name||"docsblazorbootstrapcom",this.serve=this.props.serve||"CWYICKJI",this.script=this.props.script||null,this.placement=this.props.placement||"",this.fallback=this.props.fallback||null,this.showFallback=!1}adShowing=()=>null!==document.getElementById(`${this.name} #carbonads`);componentDidMount=()=>{let e=document.createElement("script");e.defer=!!this.script,e.async=!0,e.id=this.script?"":"_carbonads_js",e.type="text/javascript",e.src=this.script||`//cdn.carbonads.com/carbon.js?serve=${this.serve}&placement=${this.placement}`,e.onerror=()=>{this.showFallback=!0,this.forceUpdate()},e.addEventListener("load",(()=>{this.adShowing||_.invoke(window._carbonads,"refresh")})),document.querySelector(`#${this.name}`).appendChild(e)};render(){return this.showFallback&&this.fallback?this.fallback:l.createElement("div",{id:this.name})}}const s=i,o={toc:[]},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s,{mdxType:"CarbonAd"}))}p.isMDXComponent=!0},22469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),l=(n(67294),n(3905)),r=n(74404);const i={title:"Blazor Sortable List Component",description:"The Blazor Bootstrap Sortable List component, built on top of SortableJS, enables drag-and-drop reordering of lists.",image:"https://i.imgur.com/bfzP8Yi.png",sidebar_label:"Sortable List",sidebar_position:25},s="Blazor Sortable List (Preview)",o={unversionedId:"components/sortable-list",id:"components/sortable-list",title:"Blazor Sortable List Component",description:"The Blazor Bootstrap Sortable List component, built on top of SortableJS, enables drag-and-drop reordering of lists.",source:"@site/docs/05-components/sortable-list.mdx",sourceDirName:"05-components",slug:"/components/sortable-list",permalink:"/components/sortable-list",draft:!1,editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/05-components/sortable-list.mdx",tags:[],version:"current",sidebarPosition:25,frontMatter:{title:"Blazor Sortable List Component",description:"The Blazor Bootstrap Sortable List component, built on top of SortableJS, enables drag-and-drop reordering of lists.",image:"https://i.imgur.com/bfzP8Yi.png",sidebar_label:"Sortable List",sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Sidebar2",permalink:"/components/sidebar2"},next:{title:"Spinners",permalink:"/components/spinners"}},m={},p=[{value:"Setup",id:"setup",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"Callback Events",id:"callback-events",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Shared lists",id:"shared-lists",level:3},{value:"Cloning",id:"cloning",level:3},{value:"Disable sorting",id:"disable-sorting",level:3},{value:"Handle",id:"handle",level:3},{value:"Disable item",id:"disable-item",level:3},{value:"Nested sortables",id:"nested-sortables",level:3},{value:"Dynamic data",id:"dynamic-data",level:3},{value:"Empty data",id:"empty-data",level:3}],d={toc:p},g="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(g,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"blazor-sortable-list-preview"},"Blazor Sortable List (Preview)"),(0,l.kt)("p",null,"The Blazor Bootstrap Sortable List component, built on top of ",(0,l.kt)("b",null,"SortableJS"),", enables drag-and-drop reordering of lists."),(0,l.kt)(r.ZP,{mdxType:"CarbonAd"}),(0,l.kt)("img",{src:"https://i.imgur.com/bfzP8Yi.png",alt:"Blazor Sortable List"}),(0,l.kt)("h2",{id:"setup"},"Setup"),(0,l.kt)("p",null,"Before using the ",(0,l.kt)("strong",{parentName:"p"},"SortableList")," component, include the ",(0,l.kt)("strong",{parentName:"p"},"SortableJS")," script reference in your ",(0,l.kt)("inlineCode",{parentName:"p"},"index.html/_Host.cshtml")," file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"><\/script>\n')),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Added Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"AllowSorting"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets a value indicating whether sorting is allowed for the list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ChildContent"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"RenderFragment")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the content to be rendered within the component."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Data"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"List<TItem>")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the items."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"DisabledItemCssClass"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the CSS class applied to disabled items."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"DisableItem"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Func<TItem, bool>")),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets a delegate that determines whether an item should be disabled."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"EmptyDataTemplate"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"RenderFragment")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Specifies the template to render when there are no items to display in the list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"EmptyText"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"No records to display")),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the text to display when there are no records in the list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Group"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the group name associated with the list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Handle"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the CSS selector for the drag handle element."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"IsLoading"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets a value indicating whether the list is currently loading."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ItemTemplate"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"RenderFragment<TItem>?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the template used to render individual items in the list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"LoadingTemplate"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"RenderFragment")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the loading template."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the name of the ",(0,l.kt)("inlineCode",{parentName:"td"},"SortableList")," component."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Pull"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"SortableListPullMode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"SortableListPullMode.True")),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the pull mode for the sortable list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Put"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"SortableListPutMode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"SortableListPutMode.True")),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Gets or sets the put mode for the sortable list."),(0,l.kt)("td",{parentName:"tr",align:"left"},"2.2.0")))),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("p",null,"There are no public methods available."),(0,l.kt)("h2",{id:"callback-events"},"Callback Events"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Event"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Added Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OnAdd"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets an event callback that fires when an item is added to the list."),(0,l.kt)("td",{parentName:"tr",align:null},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OnRemove"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets an event callback that fires when an item is removed from the list."),(0,l.kt)("td",{parentName:"tr",align:null},"2.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OnUpdate"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets an event callback that fires when an item is updated in the list."),(0,l.kt)("td",{parentName:"tr",align:null},"2.2.0")))),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,l.kt)("img",{src:"https://i.imgur.com/6ClDwxT.png",alt:"Blazor Sortable List - Basic usage"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<SortableList TItem="Employee"\n              Data="employees"\n              Context="item"\n              OnUpdate="@OnEmployeeListUpdate">\n    <ItemTemplate>\n        @item.Name\n    </ItemTemplate>\n</SortableList>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> employees = Enumerable.Range(1, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    private void OnEmployeeListUpdate(SortableListEventArgs args)\n    {\n        var itemToMove = employees[args.OldIndex];\n\n        employees.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employees.Count)\n            employees.Insert(args.NewIndex, itemToMove);\n        else\n            employees.Add(itemToMove);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#examples"},"See demo here.")),(0,l.kt)("h3",{id:"shared-lists"},"Shared lists"),(0,l.kt)("p",null,"To drag-and-drop an item from one list to the other and vice versa, set the ",(0,l.kt)("strong",{parentName:"p"},"Group")," parameter for all the lists.\nProviding the same ",(0,l.kt)("strong",{parentName:"p"},"Group")," name for the lists is what links them together."),(0,l.kt)("p",null,"In the below example, both lists use the same ",(0,l.kt)("strong",{parentName:"p"},"Group"),"."),(0,l.kt)("img",{src:"https://i.imgur.com/UGbTLI0.png",alt:"Blazor Sortable List - Shared lists"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<div class="row">\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Group="SharedListExample2"\n                      Name="empList1"\n                      Data="employeeList1"\n                      Context="item"\n                      OnUpdate="OnEmployeeList1Update"\n                      OnRemove="OnEmployeeList1Remove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Group="SharedListExample2"\n                      Name="empList2"\n                      Data="employeeList2"\n                      Context="item"\n                      OnUpdate="OnEmployeeList2Update"\n                      OnRemove="OnEmployeeList2Remove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n</div>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> employeeList1 = Enumerable.Range(1, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    public List<Employee> employeeList2 = Enumerable.Range(6, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    private void OnEmployeeList1Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList1[args.OldIndex];\n\n        employeeList1.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList1.Count)\n            employeeList1.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList1.Add(itemToMove);\n    }\n\n    private void OnEmployeeList2Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList2[args.OldIndex];\n\n        employeeList2.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList2.Count)\n            employeeList2.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList2.Add(itemToMove);\n    }\n\n    private void OnEmployeeList1Remove(SortableListEventArgs args)\n    {\n        // get the item at the old index in list 1\n        var item = employeeList1[args.OldIndex];\n\n        // add it to the new index in list 2\n        employeeList2.Insert(args.NewIndex, item);\n\n        // remove the item from the old index in list 1\n        employeeList1.Remove(employeeList1[args.OldIndex]);\n    }\n\n    private void OnEmployeeList2Remove(SortableListEventArgs args)\n    {\n        // get the item at the old index in list 2\n        var item = employeeList2[args.OldIndex];\n\n        // add it to the new index in list 1\n        employeeList1.Insert(args.NewIndex, item);\n\n        // remove the item from the old index in list 2\n        employeeList2.Remove(employeeList2[args.OldIndex]);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,"In the following example, all three lists use the same group."),(0,l.kt)("img",{src:"https://i.imgur.com/4mD4uhZ.png",alt:"Blazor Sortable List - Shared lists - More than two lists"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<div class="row">\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Group="SharedListExample3"\n                      Name="empList1"\n                      Data="employeeList1"\n                      Context="item"\n                      OnUpdate="OnEmployeeList1Update"\n                      OnRemove="OnEmployeeListRemove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Group="SharedListExample3"\n                      Name="empList2"\n                      Data="employeeList2"\n                      Context="item"\n                      OnUpdate="OnEmployeeList2Update"\n                      OnRemove="OnEmployeeListRemove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Group="SharedListExample3"\n                      Name="empList3"\n                      Data="employeeList3"\n                      Context="item"\n                      OnUpdate="OnEmployeeList3Update"\n                      OnRemove="OnEmployeeListRemove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n</div>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> employeeList1 = Enumerable.Range(10, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    public List<Employee> employeeList2 = Enumerable.Range(20, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    public List<Employee> employeeList3 = Enumerable.Range(30, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    private void OnEmployeeList1Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList1[args.OldIndex];\n\n        employeeList1.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList1.Count)\n            employeeList1.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList1.Add(itemToMove);\n    }\n\n    private void OnEmployeeList2Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList2[args.OldIndex];\n\n        employeeList2.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList2.Count)\n            employeeList2.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList2.Add(itemToMove);\n    }\n\n    private void OnEmployeeList3Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList3[args.OldIndex];\n\n        employeeList3.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList3.Count)\n            employeeList3.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList3.Add(itemToMove);\n    }\n\n    private void OnEmployeeListRemove(SortableListEventArgs args)\n    {\n        Employee? item = default!;\n\n        // get the item at the old index\n        if (args.FromListName == "empList1")\n            item = employeeList1[args.OldIndex];\n        else if (args.FromListName == "empList2")\n            item = employeeList2[args.OldIndex];\n        else\n            item = employeeList3[args.OldIndex];\n\n        // add it to the new index\n        if (args.ToListName == "empList1")\n            employeeList1.Insert(args.NewIndex, item);\n        else if (args.ToListName == "empList2")\n            employeeList2.Insert(args.NewIndex, item);\n        else\n            employeeList3.Insert(args.NewIndex, item);\n\n        // remove the item from the old index\n        if (args.FromListName == "empList1")\n            employeeList1.Remove(employeeList1[args.OldIndex]);\n        else if (args.FromListName == "empList2")\n            employeeList2.Remove(employeeList2[args.OldIndex]);\n        else\n            employeeList3.Remove(employeeList3[args.OldIndex]);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#shared-lists"},"See demo here.")),(0,l.kt)("h3",{id:"cloning"},"Cloning"),(0,l.kt)("p",null,"By setting ",(0,l.kt)("inlineCode",{parentName:"p"},'Pull="SortableListPullMode.Clone"'),", you can enable item cloning.\nDrag an item from one list to another to create a copy that stays in the original list."),(0,l.kt)("img",{src:"https://i.imgur.com/RSCHtNx.png",alt:"Blazor Sortable List - Cloning"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<div class="row">\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Data="employeeList1"\n                      Context="item"\n                      Group="SharedListExample3"\n                      Pull="SortableListPullMode.Clone"\n                      OnUpdate="OnEmployeeList1Update"\n                      OnRemove="OnEmployeeList1Remove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n    <div class="col">\n        <SortableList TItem="Employee"\n                      Data="employeeList2"\n                      Context="item"\n                      Group="SharedListExample3"\n                      Pull="SortableListPullMode.Clone"\n                      OnUpdate="OnEmployeeList2Update"\n                      OnRemove="OnEmployeeList2Remove">\n            <ItemTemplate>\n                @item.Name\n            </ItemTemplate>\n        </SortableList>\n    </div>\n</div>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> employeeList1 = Enumerable.Range(10, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    public List<Employee> employeeList2 = Enumerable.Range(20, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    private void OnEmployeeList1Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList1[args.OldIndex];\n\n        employeeList1.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList1.Count)\n            employeeList1.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList1.Add(itemToMove);\n    }\n\n    private void OnEmployeeList2Update(SortableListEventArgs args)\n    {\n        var itemToMove = employeeList2[args.OldIndex];\n\n        employeeList2.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employeeList2.Count)\n            employeeList2.Insert(args.NewIndex, itemToMove);\n        else\n            employeeList2.Add(itemToMove);\n    }\n\n    private void OnEmployeeList1Remove(SortableListEventArgs args)\n    {\n        // get the item at the old index in list 1\n        var item = employeeList1[args.OldIndex];\n\n        var clone = item with {};\n\n        // add it to the new index in list 2\n        employeeList2.Insert(args.NewIndex, clone);\n    }\n\n    private void OnEmployeeList2Remove(SortableListEventArgs args)\n    {\n        // get the item at the old index in list 2\n        var item = employeeList2[args.OldIndex];\n\n        var clone = item with { };\n\n        // add it to the new index in list 1\n        employeeList1.Insert(args.NewIndex, clone);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#cloning"},"See demo here.")),(0,l.kt)("h3",{id:"disable-sorting"},"Disable sorting"),(0,l.kt)("p",null,"You can disable list sorting by setting ",(0,l.kt)("inlineCode",{parentName:"p"},'AllowSorting="false"'),". In the example below, the list cannot be sorted."),(0,l.kt)("img",{src:"https://i.imgur.com/vN9EOng.png",alt:"Blazor Sortable List - Disable sorting"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<SortableList TItem="Employee"\n              Data="items"\n              Context="item"\n              AllowSorting="false">\n    <ItemTemplate>\n        @item.Name\n    </ItemTemplate>\n</SortableList>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> items = Enumerable.Range(1, 5).Select(i => new Employee { Id = i, Name = $"Item {i}" }).ToList();\n\n    public class Employee\n    {\n        public int Id { get; set; }\n        public string? Name { get; set; }\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#disable-sorting"},"See demo here.")),(0,l.kt)("h3",{id:"handle"},"Handle"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"Handle")," parameter specifies the CSS class that denotes the drag handle. In the example below, items can only be sorted by dragging the handle itself."),(0,l.kt)("img",{src:"https://i.imgur.com/JCNaf0i.png",alt:"Blazor Sortable List - Handle"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<SortableList Class="mb-3"\n              Handle=".bb-sortable-list-handle"\n              TItem="Employee"\n              Data="employees"\n              Context="item"\n              OnUpdate="@OnEmployeeListUpdate">\n\n    <ItemTemplate>\n        <div class="d-flex justify-content-start">\n            <div class="bb-sortable-list-handle pe-2"><Icon Name="IconName.GripVertical" /></div>\n            <div>@item.Name</div>\n        </div>\n    </ItemTemplate>\n\n</SortableList>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> employees = Enumerable.Range(1, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    private void OnEmployeeListUpdate(SortableListEventArgs args)\n    {\n        var itemToMove = employees[args.OldIndex];\n\n        employees.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employees.Count)\n            employees.Insert(args.NewIndex, itemToMove);\n        else\n            employees.Add(itemToMove);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#handle"},"See demo here.")),(0,l.kt)("h3",{id:"disable-item"},"Disable item"),(0,l.kt)("p",null,"Try dragging the red-backgrounded item. You won't be able to, as it's disabled using the ",(0,l.kt)("strong",{parentName:"p"},"DisableItem")," parameter."),(0,l.kt)("img",{src:"https://i.imgur.com/feeWEe3.png",alt:"Blazor Sortable List - Disable item"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<SortableList TItem="Employee"\n              Data="employees"\n              Context="item" \n              DisableItem="(emp) => emp.Id == 4" \n              DisabledItemCssClass="list-group-item-danger border-0"\n              OnUpdate="@OnEmployeeListUpdate">\n    <ItemTemplate>\n        @item.Name\n    </ItemTemplate>\n</SortableList>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public List<Employee> employees = Enumerable.Range(1, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n\n    private void OnEmployeeListUpdate(SortableListEventArgs args)\n    {\n        var itemToMove = employees[args.OldIndex];\n\n        employees.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employees.Count)\n            employees.Insert(args.NewIndex, itemToMove);\n        else\n            employees.Add(itemToMove);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#disable-item"},"See demo here.")),(0,l.kt)("h3",{id:"nested-sortables"},"Nested sortables"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Nested list sorting is not currently supported. We will add this feature in upcoming releases.")),(0,l.kt)("h3",{id:"dynamic-data"},"Dynamic data"),(0,l.kt)("img",{src:"https://i.imgur.com/WsKIxFy.png",alt:"Blazor Sortable List - Dynamic data"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<SortableList Class="mb-3"\n              TItem="Employee"\n              Data="employees"\n              Context="item"\n              IsLoading="isLoading"\n              OnUpdate="@OnEmployeeListUpdate">\n    <ItemTemplate>\n        @item.Name\n    </ItemTemplate>\n</SortableList>\n\n<Button Color="ButtonColor.Success" @onclick="LoadDataAsync"> Load data </Button>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'@code {\n    public bool isLoading = false;\n    public List<Employee> employees = null!;\n\n    private async Task LoadDataAsync()\n    {\n        isLoading = true;\n        await Task.Delay(3000);\n        employees = Enumerable.Range(1, 5).Select(i => new Employee(i, $"Employee {i}")).ToList();\n        isLoading = false;\n        await base.OnInitializedAsync();\n    }\n\n    private void OnEmployeeListUpdate(SortableListEventArgs args)\n    {\n        var itemToMove = employees[args.OldIndex];\n\n        employees.RemoveAt(args.OldIndex);\n\n        if (args.NewIndex < employees.Count)\n            employees.Insert(args.NewIndex, itemToMove);\n        else\n            employees.Add(itemToMove);\n    }\n\n    public record Employee(int Id, string? Name);\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#dynamic-data"},"See demo here.")),(0,l.kt)("h3",{id:"empty-data"},"Empty data"),(0,l.kt)("img",{src:"https://i.imgur.com/KHsQIxN.png",alt:"Blazor Sortable List - Empty data"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<SortableList TItem="Employee"\n              Data="items"\n              Context="item">\n    <ItemTemplate>\n        @item.Name\n    </ItemTemplate>\n</SortableList>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    public List<Employee> items = null!;\n\n    public record Employee(int Id, string? Name);\n}\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/sortable-list#empty-data"},"See demo here.")))}c.isMDXComponent=!0}}]);