<Grid TItem="Employee1"
      AllowSorting="true"
      Class="table table-hover"
      DataProvider="EmployeesDataProvider"
      HeaderRowCssClass="bg-primary text-white border-bottom-0"
      Responsive="true">

    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="item => item.Id">
        @context.Id
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="item => item.Name">
        @context.Name
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="item => item.Designation">
        @context.Designation
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="item => item.DOJ">
        @context.DOJ
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="item => item.IsActive">
        @context.IsActive
    </GridColumn>

</Grid>

<Grid TItem="Employee1"
      AllowSorting="true"
      Class="table table-hover"
      DataProvider="EmployeesDataProvider"
      HeaderRowCssClass="bg-primary text-white bg-opacity-75 border-bottom-0"
      Responsive="true">

    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="item => item.Id">
        @context.Id
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="item => item.Name">
        @context.Name
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="item => item.Designation">
        @context.Designation
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="item => item.DOJ">
        @context.DOJ
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="item => item.IsActive">
        @context.IsActive
    </GridColumn>

</Grid>

<Grid TItem="Employee1"
             AllowSorting="true"
             Class="table table-hover"
             DataProvider="EmployeesDataProvider"
             HeaderRowCssClass="bg-success text-white border-bottom-0"
             Responsive="true">

    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="item => item.Id">
        @context.Id
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="item => item.Name">
        @context.Name
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="item => item.Designation">
        @context.Designation
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="item => item.DOJ">
        @context.DOJ
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="item => item.IsActive">
        @context.IsActive
    </GridColumn>

</Grid>

<Grid TItem="Employee1"
      AllowSorting="true"
      Class="table table-hover"
      DataProvider="EmployeesDataProvider"
      HeaderRowCssClass="bg-success text-white bg-opacity-75 border-bottom-0"
      Responsive="true">

    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="item => item.Id">
        @context.Id
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="item => item.Name">
        @context.Name
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="item => item.Designation">
        @context.Designation
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="item => item.DOJ">
        @context.DOJ
    </GridColumn>

    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="item => item.IsActive">
        @context.IsActive
    </GridColumn>

</Grid>

@code {
    private IEnumerable<Employee1> employees = default!;

    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)
    {
        if (employees is null) // pull employees only one time for client-side filtering, sorting, and paging
            employees = GetEmployees(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(employees));
    }

    private IEnumerable<Employee1> GetEmployees()
    {
        return new List<Employee1>
        {
            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },
            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },
            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },
            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },
            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },
            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },
        };
    }
}